[{"content":"The meta lessons:\nLearn patterns not problems. Visualize. Visualize. Visualize. Think about how to solve the problem before writing code. Think out loud. Its ok to start with brute force. Never assume. Comparision in Loops. To solve comparision based problems, my first instinct was to always loop through two arrays. However, if a comparision (a,b) is the same as (b,a), a simple trick is to start the second array from current position of the first array i.e., instead of comparing items in the full square shown below, only compare items in the upper triangle. If the comparision between (1, 2) and (2,1) are the same, we can just do (1,2) which is present in the upper triangle.\n1for i in range(len(nums)): 2\tfor j in range(i+1, len(nums)): # This is the upper triangle 3\tprint(nums[i], nums[j]) The advantage of using a while loop over a for loop. 1# I am habituated to think like a for loop, to convert for loop to while loop 2for i in range(k): 3 4# To make this a while loop it requires initialization, update and termination for the loop variable 5i = 0 6while i\u0026lt; k: 7\t# somewhere inside 8\ti+=1 Principle of not materializing unnecessary data structures Or \u0026ldquo;there are ways to know about things without creating the thing\u0026rdquo;. For example:\na. To know the length of the longest sequence, you don\u0026rsquo;t have to create the actual sequence. You can just keep track of the length as you go.\n1# Instead of creating the sequence, keep track of the length as you go 2longest = 0 3for i in range(len(nums)): 4\tlongest = max(longest, nums[i]) b. When dealing with paths in a graph or tree, you might not need to store the entire path, but just keep track of relevant information about it (like its length, start and end points, or some aggregated value).\nThis can lead to more efficient algorithms in terms of both time and space complexity.\nPython related (syntax and more) tricks, which I never bothered to learn until I started solving LeetCode:\nDeletion in lists and dicts 1# delete an item from a list using index 2a = [10, 12, 13, 14, 15] 3del a[3] # deletes the item in index 3 4 5# Interestingly, the same method works to remove an item from dictionary based on key 6mydict = {5: 3, 2: 1, 3: 3, 1: 2} 7del mydict[5] 8print(mydict) 9 10# delete an item from a list using value 11a = [10, 10, 12, 13, 14, 15] 12a.remove(10) On Sets. Sets and dictionaries are both implemented using hash tables, this means that they have constant lookup time O(1) i.e., better than a list which is O(n) lookup.\nBefore Python 3.7, sets and dicts were unordered collections i.e., the concept of indexing did not apply. When we print them, they are in random order. Since Python 3.7, dictionaries preserve insertion order (!important). For sets, this is still true. When we print them, they are in random order.\n1# Simple set operations 2lista = [10, 12, 13, 14, 15, 14, 14] 3seen = set() 4for a in lista: 5 if a in seen: 6 print(f\u0026#34;Repeated: {a}\u0026#34;) 7 else: 8 seen.add(a) On Dictionaries. 1# Dict get method with default return values 2chars = \u0026#34;believers\u0026#34; 3mydict= {} 4for char in chars: 5\t# If it finds, it returns the stored value. If not return a 0 6\tmydict[char] = mydict.get(char, 0) + 1 # Genius way to count chars in a string 7print(mydict) Dict keys and values are of type dict_keys and dict_values respectively. We need to convert them to list explicitly. The order of keys and values in dict_keys and dict_values are same as that in the dict (preserves insertion order).\n1mydict = {1: 3, 2: 2, 3: 1} 2print(mydict) 3print(list(mydict.keys())) 4print(list(mydict.values())) On chars and strings. 1# You can also sort characters. In some cases this may be helpful (such as checking equality) 1ord(\u0026#39;a\u0026#39;) returns the unicode of the alphabet. then you can do +1 to increment it. 2then you can use chr() to convert it back to the word On Lists and Tuples. Lists are mutable (can be changed after creation) but tuples are immutable. We can perform type conversion with tuple() and list() to convert between them.\n1# Tuples are immutable 2b = tuple([1, 2, 3]) # tuple expects single iterable argument like a list during creation 3b[0] = 10 # This raises TypeError: \u0026#39;tuple\u0026#39; object does not support item assignment 4 5# Lists are mutable 6a = [1, 2, 3] 7a[0] = 10 # This works! Lists can be modified 8print(a) # [10, 2, 3] 9 10# If we do tuple() on a list, it becomes immutable 11a = [1, 2, 3] 12b = tuple(a) 13b[0] = 10 # This is NOT allowed Why do we need a semicolon after break? break; We don\u0026rsquo;t, its optional. Both break and break; work exactly the same way. Additionally, here are some Python tricks I learned from watching Youtube videos from Karpathy (a wizard):\nUsing zip to grab pairs of items. 1ids = [1, 2, 3, 4] 2for item in zip(ids, ids[1:]): 3 print(item) # Gets the pairs (1,2), (2,3), (3,4) 4 # If its changed to ids[2:] we get (1,3), (2,4) 5 6# Utilizing zip to traverse the upper triangle (discussed above). 7nums = [1, 2, 3, 4, 5] 8for i in range(1, len(nums)): 9 for item in zip(nums, nums[i:]): 10 print(item) Returning conditions instead of if-else. 1# 1. Instead of using if and else like this: 2if pattern_word == pattern: 3 return True 4else: 5 return False 6 7# 2. Return the condition itself 8return pattern_word == pattern Printing variables with their names. 1# Print a variable with its name 2print(f\u0026#39;{log_likelihood=}\u0026#39;) 3# prints log_likelihood=tensor(-38.7856) Joining a list of strings. 1# Join a list of strings 2words = [\u0026#34;Hello\u0026#34;, \u0026#34;World!\u0026#34;] 3 4# Join with empty string 5result1 = \u0026#39;\u0026#39;.join(words) 6print(result1) # HelloWorld! 7 8# Instead of empty string, you can use space, comma, newline etc. 9# Join with space 10result2 = \u0026#39; \u0026#39;.join(words) 11print(result2) # Hello World! 12 13# Join with newline 14result4 = \u0026#39;\\n\u0026#39;.join(words) 15print(result4) 16# Hello 17# World! Initializing an array of given size. 1# Initializing an array of given size 2new_arr = [0] * size ","permalink":"https://poudel-bibek.github.io/posts/2024/1/","summary":"Patterns and techniques for solving LeetCode problems in Python","title":"Lessons on LeetCode: Part I"},{"content":"Sorry! This content is not available.\n","permalink":"https://poudel-bibek.github.io/sorry/","summary":"sorry","title":"ðŸ’”"},{"content":"This content is coming soon! Please check back later.\n","permalink":"https://poudel-bibek.github.io/comingsoon/","summary":"coming soon","title":"ðŸš§"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/reports/3d_delta_printer/","summary":"","title":"3D Delta Printer Report"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/cv/","summary":"","title":"Bibek Poudel's CV"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/resume/","summary":"","title":"Bibek Poudel's Resume"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/projects/datamining/","summary":"","title":"Data Mining Project: Contrastive Learning"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/projects/defense/","summary":"","title":"DQN Defense Project"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/slides/intro_to_aml/","summary":"","title":"Introduction to AML 2021"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/slides/intro_to_transformers/","summary":"","title":"Introduction to Transformers 2023"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/projects/joint_control/","summary":"","title":"Joint Pedestrian and Vehicle Traffic Optimization in Urban Environments using Reinforcement Learning"},{"content":"I have been a guest lecturer in graduate and undergraduate courses such as Machine Learning, Artificial Intelligence, and Intro to Neurocomputing.\nAn Introduction to Transformers Slides (2023) Optimization and Stochastic Gradient Descent Slides (2023) | Slides (2022) Introduction to Adversarial Machine Learning Slides (2021) SUMO Various Topics Slides (2024) ","permalink":"https://poudel-bibek.github.io/lectures/","summary":"I have been a guest lecturer in graduate and undergraduate courses such as Machine Learning, Artificial Intelligence, and Intro to Neurocomputing.\nAn Introduction to Transformers Slides (2023) Optimization and Stochastic Gradient Descent Slides (2023) | Slides (2022) Introduction to Adversarial Machine Learning Slides (2021) SUMO Various Topics Slides (2024) ","title":"Lectures"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/slides/optimization_sgd/","summary":"","title":"Optimization and SGD 2023"},{"content":" I have worked on various projects including Language Models, Software Development, and Adversarial Machine Learning.\nDocuMint: Docstring Generation for Python using Small Language Models [thumbnail:documint] Benchmarked various Small Language Models on their docstring generation quality. Created a fine-tuning dataset and released it along with a fine-tuned Google\u0026rsquo;s CodeGemma model. arXiv | Code | HuggingFace\nArtificial Intelligence Assignments [thumbnail:ai-assignments] Developed and delivered programming assignments for graduate level AI and ML courses at University of Memphis. Topics include Deep Q Networks, Proximal Policy Optimization and Finetuning of a Transformer. Code | Website\nBarterBaron: A commerce app based on barter system trade [thumbnail:barterbaron] Developed a ebay-like commerce platform using Ruby on Rails with features such as chat, search, and user authentication. Won \u0026ldquo;Best project in the class\u0026rdquo; award. Demo | Code\nRobustness to Input Corruptions and Adversarial Examples in Steering Angle Prediction via Self-Supervision [thumbnail:steering-angle] Used self-supervised learning to enhance robustness of steering angle prediction (using ResNet50 model) under conditions such as snow, fog, frost, pixelation, and blur. PDF | Video | Code\nLatent Representation of Inputs: A Defense Against Adversarial Examples in DQN [thumbnail:latent-representation] Used feature squeezing to improve the performance of a Deep Reinforcement Learning algorithm (DQN) trained to play Atari Pong, under adversarial attacks. PDF\nDistributed Hyper-paramter tuning of Neural Networks [thumbnail:hyperparameter] Parallelized the hyperparameter search (grid and random) of a Neural Network using Distributed Hash Table by sharing computational resources across multiple nodes. PDF\nDelta Design 3D Printer [thumbnail:3d-printer] Designed and developed a prototype 3D printer using Arduino Mega (Senior year Engineering project). PDF\n","permalink":"https://poudel-bibek.github.io/projects/","summary":"I have worked on various projects including Language Models, Software Development, and Adversarial Machine Learning.\nDocuMint: Docstring Generation for Python using Small Language Models [thumbnail:documint] Benchmarked various Small Language Models on their docstring generation quality. Created a fine-tuning dataset and released it along with a fine-tuned Google\u0026rsquo;s CodeGemma model. arXiv | Code | HuggingFace\nArtificial Intelligence Assignments [thumbnail:ai-assignments] Developed and delivered programming assignments for graduate level AI and ML courses at University of Memphis.","title":"Projects"},{"content":" My research lies at the intersection of reinforcement learning, autonomous systems, and intelligent transportation. Below are my publications in peer-reviewed conferences and journals.\nJoint Pedestrian and Vehicle Traffic Optimization in Urban Environments using Reinforcement Learning [thumbnail:joint-pedestrian] Bibek Poudel, Xuan Wang, Weizi Li, Lei Zhu, and Kevin Heaslip\nIROS 2025 (In Submission)\nPDF | Video | Code\nBeacon: A Naturalistic Driving Dataset During Blackouts for Benchmarking Traffic Reconstruction and Control [thumbnail:beacon] Supriya Sarker, Iftekharul Islam, Bibek Poudel, and Weizi Li IROS 2025 (In Submission)\narXiv\nVibRun: Real-time Contactless Gait Analysis for Treadmill Running via Footstep Vibrations [thumbnail:vibrun] Tianhao Wu, Yi Wu, Rajasi Gore, Bibek Poudel, Ã‡aÄŸdaÅŸ KarataÅŸ, Weizi Li, and Jian Liu\nUbiComp 2025\nPDF\nPulseRide: A Robotic Wheelchair for Personalized Exertion Control with Human-in-the-Loop Reinforcement Learning [thumbnail:pulseride] Azizul Zahid, Bibek Poudel, Danny Scott, Jason Scott, Scott Crouter, Weizi Li, and Sai Swaminathan\nCHASE 2025\nPDF\nEnduRL: Enhancing Safety, Stability, and Efficiency of Mixed Traffic Under Real-World Perturbations Via Reinforcement Learning [thumbnail:endurl] Bibek Poudel, Weizi Li, and Kevin Heaslip\nIROS 2024\nPaper | arXiv | Video | Code\nAutoJoin: Efficient Adversarial Training against Gradient-Free Perturbations for Robust Maneuvering via Joint Learning [thumbnail:autojoin] Michael Villarreal, Bibek Poudel, Ryan Wickman, Yu Shen, and Weizi Li\nIROS 2024\nPaper | arXiv | Video | Code\nCARL: Congestion-Aware Reinforcement Learning for Imitation-based Perturbations in Mixed Traffic Control [thumbnail:carl] Bibek Poudel, Shuai Li, and Weizi Li\nIEEE CYBER 2024\nPaper | arXiv | Code\nMixed Traffic Control and Coordination from Pixels [thumbnail:mtc-pixels] Michael Villarreal, Bibek Poudel, Jia Pan, and Weizi Li\nICRA 2024\nPaper | arXiv | Video | Code\nCan ChatGPT Enable ITS? The Case of Mixed Traffic Control via Reinforcement Learning [thumbnail:chatgpt-its] Michael Villarreal, Bibek Poudel, and Weizi Li\nITSC 2023\nPaper | arXiv | Code\nEfficient Quality-Diversity Optimization through Diverse Quality Species [thumbnail:dqs] Ryan Wickman, Bibek Poudel, Michael Villarreal, Xiaofei Zhang, and Weizi Li\nGECCO 2023\nPaper | arXiv | Code\nLearning to Control DC Motor for Micromobility in Real Time with Reinforcement Learning [thumbnail:dc-motor] Bibek Poudel, Thomas Watson, and Weizi Li\nITSC 2022\nPaper | arXiv | Video | Code\nBlack-box Adversarial Attacks on Network-wide Multi-step Traffic State Prediction Models [thumbnail:black-box] Bibek Poudel and Weizi Li\nITSC 2021\nPaper | arXiv | Video | Code\n","permalink":"https://poudel-bibek.github.io/posts/publications/","summary":"My research lies at the intersection of reinforcement learning, autonomous systems, and intelligent transportation. Below are my publications in peer-reviewed conferences and journals.\nJoint Pedestrian and Vehicle Traffic Optimization in Urban Environments using Reinforcement Learning [thumbnail:joint-pedestrian] Bibek Poudel, Xuan Wang, Weizi Li, Lei Zhu, and Kevin Heaslip\nIROS 2025 (In Submission)\nPDF | Video | Code\nBeacon: A Naturalistic Driving Dataset During Blackouts for Benchmarking Traffic Reconstruction and Control [thumbnail:beacon] Supriya Sarker, Iftekharul Islam, Bibek Poudel, and Weizi Li IROS 2025 (In Submission)","title":"Publications"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/projects/pulseride/","summary":"","title":"PulseRide"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/projects/proposal/","summary":"","title":"Research Proposal"},{"content":"","permalink":"https://poudel-bibek.github.io/pdfs/slides/sumo_class/","summary":"","title":"SUMO Class"},{"content":"Bots are working on it. Will be available soon.\n","permalink":"https://poudel-bibek.github.io/handler/","summary":"handler","title":"ðŸ¤–"}]